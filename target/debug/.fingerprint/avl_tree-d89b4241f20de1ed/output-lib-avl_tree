{"message":"type arguments are not allowed on self type","code":{"code":"E0109","explanation":"You tried to provide a generic argument to a type which doesn't need it.\n\nErroneous code example:\n\n```compile_fail,E0109\ntype X = u32<i32>; // error: type arguments are not allowed for this type\ntype Y = bool<'static>; // error: lifetime parameters are not allowed on\n                        //        this type\n```\n\nCheck that you used the correct argument and that the definition is correct.\n\nExample:\n\n```\ntype X = u32; // ok!\ntype Y = bool; // ok!\n```\n\nNote that generic arguments for enum variant constructors go after the variant,\nnot after the enum. For example, you would write `Option::None::<u32>`,\nrather than `Option::<u32>::None`.\n"},"level":"error","spans":[{"file_name":"src\\lib.rs","byte_start":185,"byte_end":186,"line_start":9,"line_end":9,"column_start":26,"column_end":27,"is_primary":true,"text":[{"text":"    pub fn new() -> Self<T>","highlight_start":26,"highlight_end":27}],"label":"type argument not allowed","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\lib.rs","byte_start":180,"byte_end":184,"line_start":9,"line_end":9,"column_start":21,"column_end":25,"is_primary":false,"text":[{"text":"    pub fn new() -> Self<T>","highlight_start":21,"highlight_end":25}],"label":"not allowed on self type","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`Self` is of type `AVLRoot<T>`","code":null,"level":"note","spans":[{"file_name":"src\\lib.rs","byte_start":100,"byte_end":118,"line_start":7,"line_end":7,"column_start":1,"column_end":19,"is_primary":false,"text":[{"text":"impl<T> AVLRoot<T> {","highlight_start":1,"highlight_end":19}],"label":"`Self` is on type `AVLRoot` in this `impl`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\lib.rs","byte_start":11,"byte_end":18,"line_start":1,"line_end":1,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"pub struct AVLRoot<T> {","highlight_start":12,"highlight_end":19}],"label":"`Self` corresponds to this type","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the `Self` type doesn't accept type parameters, use the concrete type's name `AVLRoot` instead if you want to specify its type parameters","code":null,"level":"help","spans":[{"file_name":"src\\lib.rs","byte_start":180,"byte_end":184,"line_start":9,"line_end":9,"column_start":21,"column_end":25,"is_primary":true,"text":[{"text":"    pub fn new() -> Self<T>","highlight_start":21,"highlight_end":25}],"label":null,"suggested_replacement":"AVLRoot","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0109]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: type arguments are not allowed on self type\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\lib.rs:9:26\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn new() -> Self<T>\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mtype argument not allowed\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mnot allowed on self type\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `Self` is of type `AVLRoot<T>`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\lib.rs:1:12\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct AVLRoot<T> {\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m`Self` corresponds to this type\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl<T> AVLRoot<T> {\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m`Self` is on type `AVLRoot` in this `impl`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: the `Self` type doesn't accept type parameters, use the concrete type's name `AVLRoot` instead if you want to specify its type parameters\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    pub fn new() -> \u001b[0m\u001b[0m\u001b[38;5;10mAVLRoot\u001b[0m\u001b[0m<T>\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~\u001b[0m\n\n"}
{"message":"aborting due to previous error","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: aborting due to previous error\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0109`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mFor more information about this error, try `rustc --explain E0109`.\u001b[0m\n"}
